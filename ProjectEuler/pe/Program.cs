using System;
using System.Collections.Generic;
using System.Linq;

namespace ProjectEuler
{
	class Program
	{
		static void Main()
		{
			Timing timing = new Timing();

			Console.WriteLine("\t : " + timing.TimeExecution(Problem1));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem2));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem3));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem4));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem5));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem6));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem7));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem8));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem14));
			Console.WriteLine("\t : " + timing.TimeExecution(Problem34));

			Console.WriteLine("Fin.");
			Console.ReadKey();
		}

		/// <summary>
		/// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
		///
		/// Find the sum of all the multiples of 3 or 5 below 1000.
		/// </summary>
		private static void Problem1()
		{
			var answer = 0;

			for (var x = 1; x < 1000; x++)
			{
				if (x % 3 == 0 || x % 5 == 0)
					answer += x;
			}

			AnswerWriter.DisplayAnswer(answer.ToString(), 1);
		}

		/// <summary>
		/// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
		/// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		/// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
		/// </summary>
		private static void Problem2()
		{
			var answer = 2;
			var x = 1;
			var y = 2;
			var f = 0;

			while (f <= 4000000)
			{
				f = HelperMethods.GetNextFibonnaci(x, y);

				if (f % 2 == 0)
					answer += f;

				x = y;
				y = f;
			}

			AnswerWriter.DisplayAnswer(answer.ToString(), 2);
		}

		///	<summary>
		/// The prime factors of 13195 are 5, 7, 13 and 29.
		///
		/// What is the largest prime factor of the number 600851475143 ?
		/// </summary>
		private static void Problem3()
		{
			const ulong target = 600851475143;
			var sieve = new PrimeNumberSieve();
			var primes = sieve.Sieve(1000000);
			var answer = primes.Reverse().FirstOrDefault(prime => target % prime == 0);
			AnswerWriter.DisplayAnswer(answer.ToString(), 3);
		}

		/// <summary>
		/// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
		///
		/// Find the largest palindrome made from the product of two 3-digit numbers.
		/// </summary>
		private static void Problem4()
		{
			uint answer = 0;
			var a = 999;

			while (a > 100)
			{
				string b = a + HelperMethods.Reverse(a.ToString());
				var c = Convert.ToUInt32(b);

				if (HelperMethods.FindHighestFactor(c, 100, 999) > 99)
				{
					answer = c;
					break;
				}
				a--;
			}

			AnswerWriter.DisplayAnswer(answer.ToString(), 4);
		}

		/// <summary>
		/// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
		///
		/// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
		/// </summary>
		private static void Problem5()
		{
			bool answerFound = false;
			ulong x = 0;

			while (!answerFound)
			{
				x += 20;
				answerFound = true;
				for (ulong c = 1; c <= 20; c++)
				{
					if (x % c != 0)
					{
						answerFound = false;
						break;
					}
				}
			}

			AnswerWriter.DisplayAnswer(x.ToString(), 5);
		}

		/// <summary>
		/// The sum of the squares of the first ten natural numbers is,
		/// 1^2 + 2^2 + ... + 10^2 = 385
		/// The square of the sum of the first ten natural numbers is,
		///
		/// (1 + 2 + ... + 10)^2 = 552 = 3025
		/// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
		///
		/// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
		/// </summary>
		private static void Problem6()
		{
			const int upperBound = 100;
			var sumOfSquares = 0;
			var squareOfSums = 0;

			for (var i = 1; i <= upperBound; i++)
			{
				sumOfSquares += i * i;
				squareOfSums += i;
			}

			squareOfSums *= squareOfSums;
			var answer = squareOfSums - sumOfSquares;

			AnswerWriter.DisplayAnswer(answer.ToString(), 6);

		}

		/// <summary>
		/// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
		///
		/// What is the 10 001st prime number?
		/// </summary>
		private static void Problem7()
		{
			var sieve = new PrimeNumberSieve();
			var primes = sieve.Sieve(105000);
			AnswerWriter.DisplayAnswer(primes[10000].ToString(), 7);
		}

		///	<summary>
		/// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
		///
		///	73167176531330624919225119674426574742355349194934
		///	96983520312774506326239578318016984801869478851843
		///	85861560789112949495459501737958331952853208805511
		///	12540698747158523863050715693290963295227443043557
		///	66896648950445244523161731856403098711121722383113
		///	62229893423380308135336276614282806444486645238749
		///	30358907296290491560440772390713810515859307960866
		///	70172427121883998797908792274921901699720888093776
		///	65727333001053367881220235421809751254540594752243
		///	52584907711670556013604839586446706324415722155397
		///	53697817977846174064955149290862569321978468622482
		///	83972241375657056057490261407972968652414535100474
		///	82166370484403199890008895243450658541227588666881
		///	16427171479924442928230863465674813919123162824586
		///	17866458359124566529476545682848912883142607690042
		///	24219022671055626321111109370544217506941658960408
		///	07198403850962455444362981230987879927244284909188
		///	84580156166097919133875499200524063689912560717606
		///	05886116467109405077541002256983155200055935729725
		///	71636269561882670428252483600823257530420752963450
		///
		/// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.What is the value of this product?
		/// </summary>
		private static void Problem8()
		{
			int[] numbers = {
				7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4,
				9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3,
				8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1,
				1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7,
				6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3,
				6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9,
				3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6,
				7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6,
				6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3,
				5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7,
				5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2,
				8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4,
				8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1,
				1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6,
				1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2,
				2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8,
				0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8,
				8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6,
				0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5,
				7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0,
			};

			ulong answer = 0;
			var len = 13;
			
			for(var x = 0; x < 999-len; x++)
			{
				ulong total = 1;
				for(var y = x; y < (x+len); y++)
					total *= (ulong)numbers[y];

				if (total > answer)
					answer = total;
			}
			AnswerWriter.DisplayAnswer(answer.ToString(), 8);
		}

		/// <summary>
		///
		/// The following iterative sequence is defined for the set of positive integers:
		/// n → n/2 (n is even)
		/// n → 3n + 1 (n is odd)
		///
		/// Using the rule above and starting with 13, we generate the following sequence:
		/// 
		/// 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
		/// It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
		/// Which starting number, under one million, produces the longest chain?
		/// NOTE: Once the chain starts the terms are allowed to go above one million.
		/// </summary>
		private static void Problem14BruteForce()
		{
			const ulong upperBound = 1000000;
			uint answer = 0;
			uint longestChain = 0;

			for (uint x = 2; x <= upperBound; x++)
			{
				ulong y = x;
				uint chainLength = 0;

				do
				{
					++chainLength;

					if ((y & 1) == 1)
						y += (y << 1) + 1;
					else
						y /= 2;

				} while (y != 1);

				if (chainLength > longestChain)
				{
					longestChain = chainLength;
					answer = x;
				}
			}

			AnswerWriter.DisplayAnswer(answer + " -- BF ", 14);
		}

		/// <summary>
		///
		/// The following iterative sequence is defined for the set of positive integers:
		/// n → n/2 (n is even)
		/// n → 3n + 1 (n is odd)
		///
		/// Using the rule above and starting with 13, we generate the following sequence:
		/// 
		/// 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
		/// It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
		/// Which starting number, under one million, produces the longest chain?
		/// NOTE: Once the chain starts the terms are allowed to go above one million.
		/// </summary>
		private static void Problem14()
		{
			var knownChainLengths = new Dictionary<ulong, int>();
			knownChainLengths.Add(1, 1);
			var currentChain = new List<ulong>();

			for (ulong x = 1000000; x > 1; x--)
			{
				currentChain.Clear();
				var y = x;
				var chainLengthFromCurrentPoint = 0;

				if (!knownChainLengths.ContainsKey(x))
				{
					do
					{
						currentChain.Insert(0, y);

						if ((y & 1) == 1)
							y += (y << 1) + 1;
						else
							y /= 2;

						if (knownChainLengths.ContainsKey(y))
						{
							knownChainLengths.TryGetValue(y, out chainLengthFromCurrentPoint);
							UpdateDictionary(knownChainLengths, currentChain, chainLengthFromCurrentPoint);
							break;
						}

					} while (y != 1);
				}

				UpdateDictionary(knownChainLengths, currentChain, chainLengthFromCurrentPoint);
			}

			AnswerWriter.DisplayAnswer(knownChainLengths.Aggregate((l, r) => l.Value > r.Value ? l : r).Key.ToString(), 14);
		}

		/// <summary>
		/// 145 is a curious number, as 1! + 4! + 5! = 1 + 24 + 120 = 145.
		///
		/// Find the sum of all numbers which are equal to the sum of the factorial of their digits.
		///
		/// Note: as 1! = 1 and 2! = 2 are not sums they are not included.
		/// </summary>
		private static void Problem34()
		{
			var answer = 0;

			for (var currentNumber = 10; currentNumber < 42500; currentNumber++)
			{
				var x = currentNumber;
				var total = 0;

				while (x > 0)
				{
					var y = x % 10;
					total += HelperMethods.GetFactorial(y);
					x /= 10;
				}

				if (total == currentNumber)
					answer += total;
			}

			AnswerWriter.DisplayAnswer(answer.ToString(), 34);
		}

		/// <summary>
		/// Helper Method for Problem 14
		/// </summary>
		/// <param name="knownChainLengths">Dictionary of current chain lengths</param>
		/// <param name="currentChain">List of the current chain sequence</param>
		/// <param name="chainLengthToZero">Current distance to zero from end of current chain</param>
		static void UpdateDictionary(IDictionary<ulong, int> knownChainLengths, IList<ulong> currentChain, int chainLengthToZero)
		{
			for (var index = 0; index < currentChain.Count; index++)
			{
				var i = currentChain[index];
				if (!knownChainLengths.ContainsKey(currentChain[index]))
					knownChainLengths.Add(i, currentChain.IndexOf(i) + 1 + chainLengthToZero);
			}
		}
	}
}
